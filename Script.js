document.addEventListener('DOMContentLoaded', function() {    const tickerInput = document.getElementById('ticker');    const startDateInput = document.getElementById('start_date');    const endDateInput = document.getElementById('end_date');    const getDataBtn = document.getElementById('getDataBtn');    const stockTable = document.getElementById('stockTable');    const predictionTable = document.getElementById('predictionTable');    const accuracyElement = document.getElementById('accuracy');    getDataBtn.addEventListener('click', async function() {        const ticker = tickerInput.value;        const startDate = startDateInput.value;        const endDate = endDateInput.value;        // 1. Fetch Data        try {            const dataResponse = await fetch(`/get_stock_data?ticker=${ticker}&start_date=${startDate}&end_date=${endDate}`);            const dataJson = await dataResponse.json();            if (!dataResponse.ok) {                throw new Error(dataJson.error || 'Failed to fetch data.');            }            // Parse the JSON to a dataframe            const data = JSON.parse(dataJson.data);            displayData(data, stockTable);            // 2. Make Prediction            const predictResponse = await fetch(`/predict?ticker=${ticker}&start_date=${startDate}&end_date=${endDate}`);            const predictJson = await predictResponse.json();            if (!predictResponse.ok) {                throw new Error(predictJson.error || 'Failed to fetch predictions.');            }            const predictions = JSON.parse(predictJson.predictions);            displayPredictions(predictions, predictionTable);            accuracyElement.textContent = `Model Accuracy: ${predictJson.accuracy.toFixed(2)}`;        } catch (error) {            console.error('Error:', error);            alert(error.message);  // Display errors to the user        }    });    // Helper functions to display data    function displayData(data, table) {            table.innerHTML = "<tr><td>No data available.</td></tr>";            return;        }        // Clear existing content        table.innerHTML = '';        const thead = document.createElement('thead');        const headerRow = thead.insertRow(0);        // Get headers dynamically        const headers = Object.keys(data[0]);        headers.forEach(headerText => {            const th = document.createElement('th');            th.textContent = headerText;            headerRow.appendChild(th);        });        table.appendChild(thead);        const tbody = document.createElement('tbody');        data.forEach(rowData => {            const row = tbody.insertRow();            headers.forEach(header => {                const cell = row.insertCell();                cell.textContent = rowData[header];            });        });        table.appendChild(tbody);    }    function displayPredictions(predictions, table) {        if (!predictions || predictions.length === 0) {            table.innerHTML = "<tr><td>No predictions available.</td></tr>";            return;        }        // Clear existing content        table.innerHTML = '';        const thead = document.createElement('thead');        const headerRow = thead.insertRow(0);        // Get headers dynamically        const headers = Object.keys(predictions[0]);        headers.forEach(headerText => {            const th = document.createElement('th');            th.textContent = headerText;            headerRow.appendChild(th);        });        table.appendChild(thead);        const tbody = document.createElement('tbody');        predictions.forEach(rowData => {            const row = tbody.insertRow();            headers.forEach(header => {                const cell = row.insertCell();                cell.textContent = rowData[header];            });        });        table.appendChild(tbody);    }});
