from flask import Flask, request, jsonifyfrom flask_cors import CORS  # Import CORSimport yfinance as yfimport pandas as pdfrom sklearn.linear_model import LinearRegressionfrom sklearn.model_selection import train_test_splitimport datetime as dtapp = Flask(__name__)CORS(app)  # Enable CORS for all routes# --- Data Acquisition and Preparation (same as before) ---def get_stock_data(ticker, start_date, end_date):    try:        data = yf.download(ticker, start=start_date, end=end_date)        if data.empty:            return None        data.reset_index(inplace=True)        return data    except Exception as e:        print(f"Error fetching data for {ticker}: {e}")        return Nonedef calculate_technical_indicators(df):    df['SMA_50'] = df['Close'].rolling(window=50).mean()    df['SMA_200'] = df['Close'].rolling(window=200).mean()    return dfdef prepare_data_for_prediction(df):    if df is None or df.empty:        return None, None, None    df = df.dropna()    df = calculate_technical_indicators(df)    features = ['SMA_50', 'SMA_200']    target = 'Close'    X = df[features]    y = df[target]    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)    return X_train, X_test, y_train, y_testdef train_and_predict(X_train, X_test, y_train):    if X_train is None or X_test is None or y_train is None:        return None, None    model = LinearRegression()    model.fit(X_train, y_train)    y_pred = model.predict(X_test)    return model, y_pred# --- API Endpoints ---@app.route('/get_stock_data', methods=['GET'])def get_stock_data_endpoint():    ticker = request.args.get('ticker')    start_date_str = request.args.get('start_date')    end_date_str = request.args.get('end_date')    if not all([ticker, start_date_str, end_date_str]):        return jsonify({'error': 'Missing parameters'}), 400 #Bad request    try:        start_date = dt.datetime.strptime(start_date_str, '%Y-%m-%d').date()        end_date = dt.datetime.strptime(end_date_str, '%Y-%m-%d').date()    except ValueError:        return jsonify({'error': 'Invalid date format. Use YYYY-MM-DD'}), 400    stock_data = get_stock_data(ticker, start_date, end_date)    if stock_data is None:        return jsonify({'error': 'Could not retrieve data for the given ticker'}), 404  # Not Found    # Convert DataFrame to JSON for transmission    stock_data_json = stock_data.to_json(orient='records')    return jsonify({'data': stock_data_json}), 200 #Success@app.route('/predict', methods=['GET'])def predict_endpoint():    ticker = request.args.get('ticker')    start_date_str = request.args.get('start_date')    end_date_str = request.args.get('end_date')    if not all([ticker, start_date_str, end_date_str]):        return jsonify({'error': 'Missing parameters'}), 400    try:        start_date = dt.datetime.strptime(start_date_str, '%Y-%m-%d').date()        end_date = dt.datetime.strptime(end_date_str, '%Y-%m-%d').date()    except ValueError:        return jsonify({'error': 'Invalid date format. Use YYYY-MM-DD'}), 400    stock_data = get_stock_data(ticker, start_date, end_date)    if stock_data is None:        return jsonify({'error': 'Could not retrieve data for the given ticker'}), 404    X_train, X_test, y_train, y_test = prepare_data_for_prediction(stock_data.copy())    if X_train is None or X_test is None or y_train is None:        return jsonify({'error': 'Not enough data or data issues for prediction.'}), 500    model, y_pred = train_and_predict(X_train, X_test, y_train)    if y_pred is None or model is None:        return jsonify({'error': 'Prediction failed.'}), 500    predictions_df = pd.DataFrame({'Actual': y_test, 'Predicted': y_pred})    accuracy = model.score(X_test, y_test)    # Convert predictions DataFrame to JSON    predictions_json = predictions_df.to_json(orient='records')    return jsonify({'predictions': predictions_json, 'accuracy': accuracy}), 200if __name__ == '__main__':    app.run(debug=True)
